package it.denzosoft.jreverse.analyzer.security;

import java.util.Objects;

/**
 * Represents a security vulnerability found in an entrypoint.
 * Contains information about the vulnerability type, severity, and remediation.
 */
public class SecurityVulnerability {
    
    private final VulnerabilityType type;
    private final Severity severity;
    private final String description;
    private final String location;
    private final String remediation;
    
    public SecurityVulnerability(VulnerabilityType type, Severity severity, String description, String location, String remediation) {
        this.type = Objects.requireNonNull(type, "type cannot be null");
        this.severity = Objects.requireNonNull(severity, "severity cannot be null");
        this.description = Objects.requireNonNull(description, "description cannot be null");
        this.location = location;
        this.remediation = remediation;
    }
    
    public VulnerabilityType getType() { return type; }
    public Severity getSeverity() { return severity; }
    public String getDescription() { return description; }
    public String getLocation() { return location; }
    public String getRemediation() { return remediation; }
    
    /**
     * Enumeration of vulnerability types.
     */
    public enum VulnerabilityType {
        SPELL_INJECTION("SpEL Injection", "Potential SpEL injection vulnerability"),
        WEAK_AUTHORIZATION("Weak Authorization", "Authorization logic is too permissive"),
        MISSING_AUTHORIZATION("Missing Authorization", "No authorization required"),
        OVERPRIVILEGED_ACCESS("Overprivileged Access", "Access grants more privileges than necessary"),
        HARDCODED_ROLES("Hardcoded Roles", "Roles are hardcoded instead of configurable"),
        COMPLEX_SPELL("Complex SpEL", "SpEL expression is too complex to validate"),
        UNSECURED_ENDPOINT("Unsecured Endpoint", "Endpoint has no security annotations"),
        DEPRECATED_SECURITY("Deprecated Security", "Uses deprecated security features");
        
        private final String displayName;
        private final String description;
        
        VulnerabilityType(String displayName, String description) {
            this.displayName = displayName;
            this.description = description;
        }
        
        public String getDisplayName() { return displayName; }
        public String getDescription() { return description; }
    }
    
    /**
     * Enumeration of vulnerability severities.
     */
    public enum Severity {
        LOW("Low", "Minor security concern", "#28a745"),
        MEDIUM("Medium", "Moderate security risk", "#ffc107"),
        HIGH("High", "Significant security risk", "#fd7e14"),
        CRITICAL("Critical", "Critical security vulnerability", "#dc3545");
        
        private final String displayName;
        private final String description;
        private final String colorCode;
        
        Severity(String displayName, String description, String colorCode) {
            this.displayName = displayName;
            this.description = description;
            this.colorCode = colorCode;
        }
        
        public String getDisplayName() { return displayName; }
        public String getDescription() { return description; }
        public String getColorCode() { return colorCode; }
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        SecurityVulnerability that = (SecurityVulnerability) obj;
        return type == that.type &&
               severity == that.severity &&
               Objects.equals(description, that.description) &&
               Objects.equals(location, that.location);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(type, severity, description, location);
    }
    
    @Override
    public String toString() {
        return "SecurityVulnerability{" +
                "type=" + type +
                ", severity=" + severity +
                ", location='" + location + '\'' +
                '}';
    }
}